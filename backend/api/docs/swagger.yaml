basePath: /
definitions:
  models.ComnmentPost:
    properties:
      value:
        type: string
    required:
    - value
    type: object
  models.CreateOrUpdatePost:
    properties:
      message:
        minLength: 5
        type: string
      selectedFile:
        type: string
      title:
        type: string
    required:
    - message
    - title
    type: object
  models.CreateUser:
    properties:
      email:
        type: string
      firstName:
        type: string
      lastName:
        type: string
      password:
        type: string
    type: object
  models.LoginUser:
    properties:
      email:
        type: string
      password:
        type: string
    type: object
  models.Message:
    properties:
      _id:
        type: string
      content:
        type: string
      recever:
        type: string
      sender:
        type: string
    type: object
  models.PostModel:
    properties:
      _id:
        type: string
      comments:
        items:
          type: string
        type: array
      createdAt:
        type: string
      creator:
        type: string
      likes:
        items:
          type: string
        type: array
      message:
        type: string
      name:
        type: string
      selectedFile:
        type: string
      title:
        type: string
    type: object
  models.SendMessageM:
    properties:
      content:
        minLength: 5
        type: string
      recever:
        type: string
      sender:
        type: string
    required:
    - content
    - recever
    - sender
    type: object
  models.UpdateUser:
    properties:
      bio:
        type: string
      imageUrl:
        type: string
      name:
        type: string
    type: object
  models.UserModel:
    properties:
      _id:
        type: string
      bio:
        type: string
      email:
        type: string
      followers:
        items:
          type: string
        type: array
      following:
        items:
          type: string
        type: array
      imageUrl:
        type: string
      name:
        type: string
      password:
        minLength: 5
        type: string
    required:
    - email
    - password
    type: object
host: localhost:5000
info:
  contact: {}
  description: This is Swagger docs for rest api golang fiber
  title: Fiber Golang Mongo Grpc Websocet etc..
  version: "1.0"
paths:
  /chat/get-user-unreadedmsg:
    get:
      consumes:
      - application/json
      description: Get unreaded message count & recodes for user
      parameters:
      - description: user id
        in: query
        name: userid
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Bad Request
          schema:
            additionalProperties: true
            type: object
      summary: Get unreaded message count & recodes for user
      tags:
      - Chat
  /chat/getmsgsbynums:
    get:
      consumes:
      - application/json
      description: GetMsgsByNumbetween two users by pagenation
      parameters:
      - description: Staring point page num
        in: query
        name: from
        required: true
        type: integer
      - description: first user id
        in: query
        name: firstuid
        required: true
        type: string
      - description: second user id
        in: query
        name: seconduid
        required: true
        type: string
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            items:
              $ref: '#/definitions/models.Message'
            type: array
        "400":
          description: Bad Request
          schema:
            additionalProperties: true
            type: object
      summary: get message by pagenation
      tags:
      - Chat
  /chat/mark-msg-asreaded:
    get:
      consumes:
      - application/json
      description: mark messages as read for user uupate the recoded make is read
        true num 0
      parameters:
      - description: main user id
        in: query
        name: mainuid
        required: true
        type: string
      - description: ohter user id
        in: query
        name: otheruid
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Bad Request
          schema:
            additionalProperties: true
            type: object
      summary: mark messages as read for user
      tags:
      - Chat
  /chat/sendmessage:
    post:
      consumes:
      - application/json
      description: SendMessage form one user to another
      parameters:
      - description: user SendMessage deatils
        in: body
        name: message
        required: true
        schema:
          $ref: '#/definitions/models.SendMessageM'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.Message'
        "400":
          description: Bad Request
          schema:
            additionalProperties: true
            type: object
      summary: send message to friend user
      tags:
      - Chat
  /notification/{userid}:
    get:
      consumes:
      - application/json
      description: GetUserNotification
      parameters:
      - description: User ID
        in: path
        name: userid
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Bad Request
          schema:
            additionalProperties: true
            type: object
      summary: Get user notifications
      tags:
      - Notifications
  /notification/mark-notification-asreaded:
    get:
      consumes:
      - application/json
      description: MarkNotAsReaded
      parameters:
      - description: User ID
        in: query
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Bad Request
          schema:
            additionalProperties: true
            type: object
      summary: Mark Notfication AsReaded  for a user
      tags:
      - Notifications
  /posts:
    get:
      consumes:
      - application/json
      description: GetAllPosts with pagination
      parameters:
      - description: page number
        in: query
        name: page
        type: integer
      - description: user id
        in: query
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.PostModel'
            type: array
        "400":
          description: Bad Request
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Get All Posts
      tags:
      - Posts
    post:
      consumes:
      - application/json
      description: create new post
      parameters:
      - description: post create  deatils
        in: body
        name: post
        required: true
        schema:
          $ref: '#/definitions/models.CreateOrUpdatePost'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.PostModel'
        "400":
          description: Bad Request
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: create  a new post
      tags:
      - Posts
  /posts/{id}:
    delete:
      consumes:
      - application/json
      description: Delete post by post id need to prvided auth token for post craetor
      parameters:
      - description: Post Id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Bad Request
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Delete  post by id
      tags:
      - Posts
    get:
      consumes:
      - application/json
      description: Get new post
      parameters:
      - description: Post id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.PostModel'
        "400":
          description: Bad Request
          schema:
            additionalProperties: true
            type: object
      summary: Get  a new post
      tags:
      - Posts
    patch:
      consumes:
      - application/json
      description: Update post
      parameters:
      - description: Post Id
        in: path
        name: id
        required: true
        type: string
      - description: update post  deatils
        in: body
        name: post
        required: true
        schema:
          $ref: '#/definitions/models.CreateOrUpdatePost'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.PostModel'
        "400":
          description: Bad Request
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Update  post
      tags:
      - Posts
  /posts/{id}/commentPost:
    post:
      consumes:
      - application/json
      description: comment post
      parameters:
      - description: Post Id
        in: path
        name: id
        required: true
        type: string
      - description: comment value
        in: body
        name: post
        required: true
        schema:
          $ref: '#/definitions/models.ComnmentPost'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.PostModel'
        "400":
          description: Bad Request
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: comment  post
      tags:
      - Posts
  /posts/{id}/likePost:
    patch:
      consumes:
      - application/json
      description: Like or un like a post  by it's id
      parameters:
      - description: Post Id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.PostModel'
        "400":
          description: Bad Request
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: like or unkike a post
      tags:
      - Posts
  /posts/search:
    get:
      consumes:
      - application/json
      description: get posts adnd users matching the search query
      parameters:
      - description: Search query
        in: query
        name: searchQuery
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Bad Request
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Get Posts users by serach query
      tags:
      - Posts
  /user/{id}/following:
    patch:
      consumes:
      - application/json
      description: follow or  un follow a user
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Bad Request
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Follow/UnFollow User
      tags:
      - Users
  /user/Update/{id}:
    patch:
      consumes:
      - application/json
      description: update user deatils
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      - description: 'deatils '
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/models.UpdateUser'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.UserModel'
        "400":
          description: Bad Request
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: update user data
      tags:
      - Users
  /user/delete/{id}:
    delete:
      consumes:
      - application/json
      description: delete user
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Bad Request
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: delete user
      tags:
      - Users
  /user/getSug:
    get:
      consumes:
      - application/json
      description: get suggested userses based on the current user's following list
      parameters:
      - description: User ID
        in: query
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Bad Request
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Get Suggersted users
      tags:
      - Users
  /user/getUser/{id}:
    get:
      consumes:
      - application/json
      description: GetUser Deatils By ID
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.UserModel'
        "400":
          description: Bad Request
          schema:
            additionalProperties: true
            type: object
      summary: Get User By ID
      tags:
      - Users
  /user/signin:
    post:
      consumes:
      - application/json
      description: Login an user by providing email, password
      parameters:
      - description: user Login deatils
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/models.LoginUser'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.UserModel'
        "400":
          description: Bad Request
          schema:
            additionalProperties: true
            type: object
      summary: login a  user
      tags:
      - Authentication
  /user/signup:
    post:
      consumes:
      - application/json
      description: Register an ew user by providing email, password , first name ,
        last name
      parameters:
      - description: user register deatils
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/models.CreateUser'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.UserModel'
        "400":
          description: Bad Request
          schema:
            additionalProperties: true
            type: object
      summary: Gegister a new user
      tags:
      - Authentication
schemes:
- http
securityDefinitions:
  BearerAuth:
    description: Type "Bearer" followed by a space and the token
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
